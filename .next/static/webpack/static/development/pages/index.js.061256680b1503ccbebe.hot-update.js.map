{"version":3,"file":"static/webpack/static/development/pages/index.js.061256680b1503ccbebe.hot-update.js","sources":["webpack:///./components/wordsDisplay.js","webpack:///./pages/index.js"],"sourcesContent":["const wordsAssembler = (words) => {\n  return (\n    words.map(word => (\n      <span>\n        {word}\n      </span>\n    ))\n  );\n};\n\n\nconst WordDisplay = (props) => {\n  const { words } = props;\n  const allWords = wordsAssembler (words);\n  return(<p>\n    {allWords}\n  </p>);\n};\n\nexport default WordDisplay;\n","/* eslint-disable func-names */\nimport { useState } from 'react';\n// import fetch from 'isomorphic-unfetch';\n\nimport InputBar from '../components/inputBar';\nimport WordsDisplay from '../components/wordsDisplay.js';\n\nconst Index = () => {\n  // stringfy total words, grab total letters then (total - accuracy)/(total)\n  const [wordIndex, incrementWordIndex] = useState(0);\n  const [wasCorrect, setCorrect] = useState(false);\n  const [wrongLetters, incrementWrongLetters] = useState(0);\n\n  const words = ['dog', 'cat', 'test', 'west'];\n  const currentWord = words[wordIndex];\n\n  return (\n    <div>\n      <p>Typer</p>\n      <InputBar\n        currentWord={currentWord}\n        incrementWordIndex={() => incrementWordIndex(wordIndex + 1)}\n        handleLetterAccuracy={() => incrementWrongLetters(wrongLetters + 1)}\n        wasCorrect={wasCorrect}\n        setCorrect={() => setCorrect(!wasCorrect)}\n      />\n      {<p>that was right</p> && wasCorrect}\n\n      {`wrong letters ${wrongLetters}`}\n    </div>\n  );\n};\n\n\n// Index.getInitialProps = async function () {\n//   const wordsApiKey = process.env.WORDS_API_KEY;\n//   const wordsApiBaseUrl = 'https://random-word-api.herokuapp.com';\n//   const res = await fetch(`${wordsApiBaseUrl}/word?key=${wordsApiKey}&number=${200}`);\n//   const words = await res.json();\n\n//   return {\n//     words,\n//   };\n// };\n\nexport default Index;\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAMA;AACA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;A","sourceRoot":""}