{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/migueltrinidad/Play/typer/pages/index.js\";\nimport React from \"react\";\n\n/* eslint-disable func-names */\nimport { useState } from 'react';\nimport InputBar from '../components/inputBar';\nimport WordsDisplay from '../components/wordsDisplay';\nimport words from '../words';\n\nvar Index = function Index(props) {\n  console.log('it rendered');\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      wordIndex = _useState2[0],\n      _incrementWordIndex = _useState2[1];\n\n  var _useState3 = useState(12),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userLetters = _useState4[0],\n      setUserLetters = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      wrongLetters = _useState6[0],\n      setWrongLetters = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      incorrectWords = _useState8[0],\n      setIncorrect = _useState8[1];\n\n  var shortword = props.slice(0, 20);\n  var currentWord = shortword[wordIndex];\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"Typer\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(WordsDisplay, {\n    words: shortword,\n    wordIndex: wordIndex,\n    incorrectWords: incorrectWords,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), React.createElement(InputBar, {\n    currentWord: currentWord,\n    wordIndex: wordIndex,\n    incrementWordIndex: function incrementWordIndex() {\n      return _incrementWordIndex(wordIndex + 1);\n    },\n    incrementWrongLetters: function incrementWrongLetters() {\n      return setWrongLetters(wrongLetters + 1);\n    },\n    decrementWrongLetters: function decrementWrongLetters() {\n      return setWrongLetters(wrongLetters - 1);\n    },\n    updateIncorrect: function updateIncorrect(e) {\n      return setIncorrect([].concat(_toConsumableArray(incorrectWords), [e]));\n    },\n    incrementUserLetters: function incrementUserLetters() {\n      return setUserLetters(userLetters + 1);\n    },\n    decrementUserLetters: function decrementUserLetters() {\n      return setUserLetters(userLetters - 1);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), \"your accuracy is  \".concat((userLetters - wrongLetters) / userLetters * 100, \"%\")));\n};\n\nIndex.getInitialProps =\n/*#__PURE__*/\n_asyncToGenerator(\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee() {\n  var wordsApiKey, wordsApiBaseUrl, res, words;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          wordsApiKey = process.env.WORDS_API_KEY;\n          wordsApiBaseUrl = 'https://random-word-api.herokuapp.com';\n          _context.next = 4;\n          return fetch(\"\".concat(wordsApiBaseUrl, \"/word?key=\").concat(wordsApiKey, \"&number=\", 200));\n\n        case 4:\n          res = _context.sent;\n          _context.next = 7;\n          return res.json();\n\n        case 7:\n          words = _context.sent;\n          return _context.abrupt(\"return\", {\n            words: words\n          });\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\nexport default Index;","map":{"version":3,"sources":["/Users/migueltrinidad/Play/typer/pages/index.js"],"names":["useState","InputBar","WordsDisplay","words","Index","props","console","log","wordIndex","incrementWordIndex","userLetters","setUserLetters","wrongLetters","setWrongLetters","incorrectWords","setIncorrect","shortword","slice","currentWord","e","getInitialProps","wordsApiKey","process","env","WORDS_API_KEY","wordsApiBaseUrl","fetch","res","json"],"mappings":";;;;;;;AAAA;AACA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AAEA,OAAOC,KAAP,MAAkB,UAAlB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAW;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;;AADuB,kBAEiBP,QAAQ,CAAC,CAAD,CAFzB;AAAA;AAAA,MAEhBQ,SAFgB;AAAA,MAELC,mBAFK;;AAAA,mBAGeT,QAAQ,CAAC,EAAD,CAHvB;AAAA;AAAA,MAGhBU,WAHgB;AAAA,MAGHC,cAHG;;AAAA,mBAIiBX,QAAQ,CAAC,CAAD,CAJzB;AAAA;AAAA,MAIhBY,YAJgB;AAAA,MAIFC,eAJE;;AAAA,mBAKgBb,QAAQ,CAAC,EAAD,CALxB;AAAA;AAAA,MAKhBc,cALgB;AAAA,MAKAC,YALA;;AAOvB,MAAMC,SAAS,GAAGX,KAAK,CAACY,KAAN,CAAY,CAAZ,EAAe,EAAf,CAAlB;AACA,MAAMC,WAAW,GAAGF,SAAS,CAACR,SAAD,CAA7B;AAEA,SACE,0CACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,YAAD;AACE,IAAA,KAAK,EAAEQ,SADT;AAEE,IAAA,SAAS,EAAER,SAFb;AAGE,IAAA,cAAc,EAAEM,cAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAME,oBAAC,QAAD;AACE,IAAA,WAAW,EAAEI,WADf;AAEE,IAAA,SAAS,EAAEV,SAFb;AAGE,IAAA,kBAAkB,EAAE;AAAA,aAAMC,mBAAkB,CAACD,SAAS,GAAG,CAAb,CAAxB;AAAA,KAHtB;AAIE,IAAA,qBAAqB,EAAE;AAAA,aAAMK,eAAe,CAACD,YAAY,GAAG,CAAhB,CAArB;AAAA,KAJzB;AAKE,IAAA,qBAAqB,EAAE;AAAA,aAAMC,eAAe,CAACD,YAAY,GAAG,CAAhB,CAArB;AAAA,KALzB;AAME,IAAA,eAAe,EAAE,yBAAAO,CAAC;AAAA,aAAIJ,YAAY,8BAAKD,cAAL,IAAqBK,CAArB,GAAhB;AAAA,KANpB;AAOE,IAAA,oBAAoB,EAAE;AAAA,aAAMR,cAAc,CAACD,WAAW,GAAG,CAAf,CAApB;AAAA,KAPxB;AAQE,IAAA,oBAAoB,EAAE;AAAA,aAAMC,cAAc,CAACD,WAAW,GAAG,CAAf,CAApB;AAAA,KARxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAgBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBF,8BAiByB,CAACA,WAAW,GAAGE,YAAf,IAA+BF,WAAhC,GAA+C,GAjBvE,OAFF,CADF;AAwBD,CAlCD;;AAqCAN,KAAK,CAACgB,eAAN;AAAA;AAAA;AAAA;AAAA,yBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBC,UAAAA,WADgB,GACFC,OAAO,CAACC,GAAR,CAAYC,aADV;AAEhBC,UAAAA,eAFgB,GAEE,uCAFF;AAAA;AAAA,iBAGJC,KAAK,WAAID,eAAJ,uBAAgCJ,WAAhC,cAAsD,GAAtD,EAHD;;AAAA;AAGhBM,UAAAA,GAHgB;AAAA;AAAA,iBAIFA,GAAG,CAACC,IAAJ,EAJE;;AAAA;AAIhBzB,UAAAA,KAJgB;AAAA,2CAMf;AACLA,YAAAA,KAAK,EAALA;AADK,WANe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;AAWA,eAAeC,KAAf","sourcesContent":["/* eslint-disable func-names */\nimport { useState } from 'react';\n\nimport InputBar from '../components/inputBar';\nimport WordsDisplay from '../components/wordsDisplay';\n\nimport words from '../words';\n\nconst Index = (props) => {\n  console.log('it rendered');\n  const [wordIndex, incrementWordIndex] = useState(0);\n  const [userLetters, setUserLetters] = useState(12);\n  const [wrongLetters, setWrongLetters] = useState(0);\n  const [incorrectWords, setIncorrect] = useState([]);\n\n  const shortword = props.slice(0, 20);\n  const currentWord = shortword[wordIndex];\n\n  return (\n    <>\n      <h1>Typer</h1>\n      <div>\n        <WordsDisplay\n          words={shortword}\n          wordIndex={wordIndex}\n          incorrectWords={incorrectWords}\n        />\n        <InputBar\n          currentWord={currentWord}\n          wordIndex={wordIndex}\n          incrementWordIndex={() => incrementWordIndex(wordIndex + 1)}\n          incrementWrongLetters={() => setWrongLetters(wrongLetters + 1)}\n          decrementWrongLetters={() => setWrongLetters(wrongLetters - 1)}\n          updateIncorrect={e => setIncorrect([...incorrectWords, e])}\n          incrementUserLetters={() => setUserLetters(userLetters + 1)}\n          decrementUserLetters={() => setUserLetters(userLetters - 1)}\n        />\n        <br />\n        {`your accuracy is  ${((userLetters - wrongLetters) / userLetters) * 100}%`}\n      </div>\n    </>\n  );\n};\n\n\nIndex.getInitialProps = async function () {\n  const wordsApiKey = process.env.WORDS_API_KEY;\n  const wordsApiBaseUrl = 'https://random-word-api.herokuapp.com';\n  const res = await fetch(`${wordsApiBaseUrl}/word?key=${wordsApiKey}&number=${200}`);\n  const words = await res.json();\n\n  return {\n    words,\n  };\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}