{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/migueltrinidad/Play/typer/components/inputBar.js\";\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\n\nvar checkLetter = function checkLetter(userWord, incrementWordIndex, currentWord, incrementWrongLetters, incrementUserLetters, updateIncorrect, wordIndex) {\n  var letterIndex = userWord.length - 1; // ignore on empty word\n\n  if (userWord[0] === ' ') {\n    return '';\n  } // handle next word, check for correctness\n\n\n  if (userWord[letterIndex] === ' ') {\n    incrementWordIndex();\n\n    if (userWord.trim() !== currentWord) {\n      updateIncorrect(wordIndex);\n    }\n\n    return '';\n  } // if the letter was correect\n\n\n  if (userWord[letterIndex] === currentWord[letterIndex]) {\n    incrementUserLetters();\n    return userWord;\n  } // if the letter was wrong\n\n\n  if (userWord[letterIndex] !== currentWord[letterIndex]) {\n    incrementWrongLetters();\n    incrementUserLetters();\n    return userWord;\n  }\n\n  return userWord;\n};\n\nvar handleBackspace = function handleBackspace(e, decrementUserLetters) {\n  if (e.key === 'Backspace') {\n    decrementUserLetters();\n  }\n};\n\nvar InputBar = function InputBar(props) {\n  var currentWord = props.currentWord,\n      wordIndex = props.wordIndex,\n      incrementWordIndex = props.incrementWordIndex,\n      incrementWrongLetters = props.incrementWrongLetters,\n      wasCorrect = props.wasCorrect,\n      updateIncorrect = props.updateIncorrect,\n      incrementUserLetters = props.incrementUserLetters,\n      decrementUserLetters = props.decrementUserLetters;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      userWord = _useState2[0],\n      setUserWord = _useState2[1];\n\n  return React.createElement(React.Fragment, null, React.createElement(\"input\", {\n    className: userWord === currentWord.slice(0, userWord.length) ? '' : 'inputWrong',\n    onChange: function onChange(e) {\n      return setUserWord(checkLetter(e.target.value, incrementWordIndex, currentWord, incrementWrongLetters, incrementUserLetters, updateIncorrect, wordIndex));\n    },\n    onKeyDown: function onKeyDown(e) {\n      return handleBackspace(e, decrementUserLetters);\n    },\n    value: userWord,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }));\n};\n\nexport default InputBar;","map":{"version":3,"sources":["/Users/migueltrinidad/Play/typer/components/inputBar.js"],"names":["React","useState","styled","checkLetter","userWord","incrementWordIndex","currentWord","incrementWrongLetters","incrementUserLetters","updateIncorrect","wordIndex","letterIndex","length","trim","handleBackspace","e","decrementUserLetters","key","InputBar","props","wasCorrect","setUserWord","slice","target","value"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAClBC,QADkB,EAElBC,kBAFkB,EAGlBC,WAHkB,EAIlBC,qBAJkB,EAKlBC,oBALkB,EAMlBC,eANkB,EAOlBC,SAPkB,EAQf;AACH,MAAMC,WAAW,GAAGP,QAAQ,CAACQ,MAAT,GAAkB,CAAtC,CADG,CAGH;;AACA,MAAIR,QAAQ,CAAC,CAAD,CAAR,KAAgB,GAApB,EAAyB;AACvB,WAAO,EAAP;AACD,GANE,CAQH;;;AACA,MAAIA,QAAQ,CAACO,WAAD,CAAR,KAA0B,GAA9B,EAAmC;AACjCN,IAAAA,kBAAkB;;AAClB,QAAID,QAAQ,CAACS,IAAT,OAAoBP,WAAxB,EAAqC;AACnCG,MAAAA,eAAe,CAACC,SAAD,CAAf;AACD;;AACD,WAAO,EAAP;AACD,GAfE,CAgBH;;;AACA,MAAIN,QAAQ,CAACO,WAAD,CAAR,KAA0BL,WAAW,CAACK,WAAD,CAAzC,EAAwD;AACtDH,IAAAA,oBAAoB;AACpB,WAAOJ,QAAP;AACD,GApBE,CAqBH;;;AACA,MAAIA,QAAQ,CAACO,WAAD,CAAR,KAA0BL,WAAW,CAACK,WAAD,CAAzC,EAAwD;AACtDJ,IAAAA,qBAAqB;AACrBC,IAAAA,oBAAoB;AACpB,WAAOJ,QAAP;AACD;;AACD,SAAOA,QAAP;AACD,CApCD;;AAsCA,IAAMU,eAAe,GAAG,SAAlBA,eAAkB,CAACC,CAAD,EAAIC,oBAAJ,EAA6B;AACnD,MAAID,CAAC,CAACE,GAAF,KAAU,WAAd,EAA2B;AACzBD,IAAAA,oBAAoB;AACrB;AACF,CAJD;;AAMA,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;AAAA,MAExBb,WAFwB,GAUtBa,KAVsB,CAExBb,WAFwB;AAAA,MAGxBI,SAHwB,GAUtBS,KAVsB,CAGxBT,SAHwB;AAAA,MAIxBL,kBAJwB,GAUtBc,KAVsB,CAIxBd,kBAJwB;AAAA,MAKxBE,qBALwB,GAUtBY,KAVsB,CAKxBZ,qBALwB;AAAA,MAMxBa,UANwB,GAUtBD,KAVsB,CAMxBC,UANwB;AAAA,MAOxBX,eAPwB,GAUtBU,KAVsB,CAOxBV,eAPwB;AAAA,MAQxBD,oBARwB,GAUtBW,KAVsB,CAQxBX,oBARwB;AAAA,MASxBQ,oBATwB,GAUtBG,KAVsB,CASxBH,oBATwB;;AAAA,kBAYMf,QAAQ,CAAC,EAAD,CAZd;AAAA;AAAA,MAYnBG,QAZmB;AAAA,MAYTiB,WAZS;;AAe1B,SACE,0CACE;AACE,IAAA,SAAS,EAAEjB,QAAQ,KAAKE,WAAW,CAACgB,KAAZ,CAAkB,CAAlB,EAAqBlB,QAAQ,CAACQ,MAA9B,CAAb,GAAqD,EAArD,GAA0D,YADvE;AAEE,IAAA,QAAQ,EAAE,kBAAAG,CAAC;AAAA,aAAIM,WAAW,CAAClB,WAAW,CACpCY,CAAC,CAACQ,MAAF,CAASC,KAD2B,EAEpCnB,kBAFoC,EAGpCC,WAHoC,EAIpCC,qBAJoC,EAKpCC,oBALoC,EAMpCC,eANoC,EAOpCC,SAPoC,CAAZ,CAAf;AAAA,KAFb;AAWE,IAAA,SAAS,EAAE,mBAAAK,CAAC;AAAA,aAAID,eAAe,CAACC,CAAD,EAAIC,oBAAJ,CAAnB;AAAA,KAXd;AAYE,IAAA,KAAK,EAAEZ,QAZT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAkBD,CAjCD;;AAmCA,eAAec,QAAf","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nconst checkLetter = (\n  userWord,\n  incrementWordIndex,\n  currentWord,\n  incrementWrongLetters,\n  incrementUserLetters,\n  updateIncorrect,\n  wordIndex,\n) => {\n  const letterIndex = userWord.length - 1;\n\n  // ignore on empty word\n  if (userWord[0] === ' ') {\n    return '';\n  }\n\n  // handle next word, check for correctness\n  if (userWord[letterIndex] === ' ') {\n    incrementWordIndex();\n    if (userWord.trim() !== currentWord) {\n      updateIncorrect(wordIndex);\n    }\n    return '';\n  }\n  // if the letter was correect\n  if (userWord[letterIndex] === currentWord[letterIndex]) {\n    incrementUserLetters();\n    return userWord;\n  }\n  // if the letter was wrong\n  if (userWord[letterIndex] !== currentWord[letterIndex]) {\n    incrementWrongLetters();\n    incrementUserLetters();\n    return userWord;\n  }\n  return userWord;\n};\n\nconst handleBackspace = (e, decrementUserLetters) => {\n  if (e.key === 'Backspace') {\n    decrementUserLetters();\n  }\n};\n\nconst InputBar = (props) => {\n  const {\n    currentWord,\n    wordIndex,\n    incrementWordIndex,\n    incrementWrongLetters,\n    wasCorrect,\n    updateIncorrect,\n    incrementUserLetters,\n    decrementUserLetters,\n  } = props;\n\n  const [userWord, setUserWord] = useState('');\n\n\n  return (\n    <>\n      <input\n        className={userWord === currentWord.slice(0, userWord.length) ? '' : 'inputWrong'}\n        onChange={e => setUserWord(checkLetter(\n          e.target.value,\n          incrementWordIndex,\n          currentWord,\n          incrementWrongLetters,\n          incrementUserLetters,\n          updateIncorrect,\n          wordIndex,\n        ))}\n        onKeyDown={e => handleBackspace(e, decrementUserLetters)}\n        value={userWord}\n      />\n    </>\n  );\n};\n\nexport default InputBar;\n"]},"metadata":{},"sourceType":"module"}